declare module 'lovefield' {
  declare type BackStore = {
    getRawDBInstance(): any;
    getRawTransaction(): any;
    dropTable(tableName: string): Promise<void>;
    addTableColumn(
        tableName: string, columnName: string,
        defaultValue: string|boolean|number|Date|ArrayBuffer): Promise<void>;
    dropTableColumn(tableName: string, columnName:string): Promise<void>;
    renameTableColumn(
        tableName: string,
        oldColumnName: string,
        newColumnName:string) : Promise<void>;
    createRow(payload: Object): Row;
    getVersion(): number;
    dump(): Array<Object>;
  }

  declare type ConnectOptions = {
    onUpgrade?: (rawDb: BackStore) => Promise<void>;
    storeType?: any;
  }

  declare type DatabaseBuilder = {
    connect(option: ?ConnectOptions): Promise<Database>;
    createTable(): TableBuilder;
  }

  declare type TableBuilder = {
    addColumn(name: string, type: any): TableBuilder;
    addPrimaryKey(columns: string[], autoInc: ?boolean): TableBuilder;
    addIndex(name: string, columns: string[], unique: ?boolean, order: ?any): TableBuilder;
    addNullable(columns: Array<string>): TableBuilder;
    addUnique(name: string, columns: Array<string>): TableBuilder;
    addForeignKey(name: string, spec: any): TableBuilder;
  };

  declare type Row = {};
  declare type Predicate = {};
  declare type ValueLiteral = string | number | boolean | Date;
  declare type PredicateProvider = {
    eq(operand: any): Predicate;
    neq(operand: any): Predicate;
    lt(operand: any): Predicate;
    lte(operand: any): Predicate;
    gt(operand: any): Predicate;
    gte(operand: any): Predicate;
    match(operand: RegExp): Predicate;
    between(from: ValueLiteral, to: ValueLiteral): Predicate;
    in(values: Array<ValueLiteral>): Predicate;
    isNull(): Predicate;
    isNotNull(): Predicate;
  }

  declare type Column = PredicateProvider & {
    as(name: string): Column;
    getName(): string;
    getNormalizedName(): string;
  }

  declare type Table = {[key: any]: PredicateProvider} & {
    createRow(values: any): any;
    addColumn:any;
  };

  declare class Schema {
    name(): string;
    pragma(): any;
    tables(): Array<Table>;
    table(tableName: string): Table;
    version(): number;
  }

  declare type Transaction = {
    attach(query: QueryBuilder): Promise<Array<Object>>;
    begin(scope: Array<Table>): Promise<void>;
    commit(): Promise<void>;
    exec(queries: Array<QueryBuilder>): Promise<Array<Array<Object>>>;
    rollback(): Promise<void>;
    stats(): any;
  }

  declare class Database {
    createTransaction(type: ?TransactionType): Transaction;
    delete(): any;
    export(): Promise<Object>;
    getSchema(): Schema;
    import(data: Object): Promise<Object>;
    insertOrReplace(): InsertQueryBuilder;
    insert(): InsertQueryBuilder;
    observe(query: SelectQueryBuilder, callback: Function): void;
    select(): SelectQueryBuilder;
    select(...columns: Column[]): SelectQueryBuilder;
    unobserve(query: any, callback: Function): void;
    update(table: Table): any;
  }

  // Query
  declare type QueryBuilder = {
    bind(...values: any[]): QueryBuilder;
    exec(): Promise<Array<Object>>;
    explain(): string;
    toSql(): string;
  }

  declare type InsertQueryBuilder = QueryBuilder & {
    into(table: Table): InsertQueryBuilder;
    values(rows: Array<Row>): InsertQueryBuilder;
  }

  declare type DeleteQueryBuilder = QueryBuilder & {
    from(table: Table): DeleteQueryBuilder;
    where(predicate: Predicate): DeleteQueryBuilder;
  }

  declare type SelectQueryBuilder = QueryBuilder & {
    from(...tables: Table[]): SelectQueryBuilder;
    groupBy(...columns: Column[]): SelectQueryBuilder;
    innerJoin(table: Table, predicate: Predicate): SelectQueryBuilder;
    leftOuterJoin(table: Table, predicate: Predicate): SelectQueryBuilder;
    limit(numberOfRows: number): SelectQueryBuilder;
    orderBy(column: Column, order: ?any): SelectQueryBuilder;
    skip(numberOfRows: number): SelectQueryBuilder;
    where(predicate: Predicate): SelectQueryBuilder;
  }

  declare type UpdateQueryBuilder = QueryBuilder & {
    set(column: Column, value: any): UpdateQueryBuilder;
    where(predicate: Predicate): UpdateQueryBuilder;
  }

  declare var op: {
    and(...args: Predicate[]): Predicate;
    not(operand: Predicate): Predicate;
    or(...args: Predicate[]): Predicate;
  };

  declare var fn: {
    avg(column: Column): Column;
    count(column: ?Column): Column;
    distinct(column: Column): Column;
    geomean(column: Column): Column;
    max(column: Column): Column;
    min(column: Column): Column;
    stddev(column: Column): Column;
    sum(column: Column): Column;
  };

  declare var Order: {
    DESC: string;
    ASC: string;
  };

  declare var schema: {
    create(dbName: string, dbVersion: number): DatabaseBuilder;
    DataStoreType: {
      INDEXED_DB: number;
      FIREBASE: number;
      MEMORY: number;
      LOCAL_STORAGE: number;
    }
  }

  declare var Type: {
    STRING: number;
    INTEGER: number;
    BOOLEAN: number;
    ARRAY_BUFFER: number;
    DATE_TIME: number;
    NUMBER: number;
    OBJECT: number;
  };

  declare type TransactionType = {
    READ_ONLY: number;
    READ_WRITE: number;
  };
}
